{"version":3,"sources":["components/Index.js","components/Film.js","App.js","serviceWorker.js","index.js"],"names":["Index","state","films","_this2","this","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","getFilms","dataFilms","wrap","_context","prev","next","fetch","sent","json","setState","stop","apply","arguments","fetchFilms","filmList","results","map","data","paramsId","url","slice","react_default","createElement","Link","className","to","key","episode_id","title","Component","Film","filmInfo","fetchSingleFilm","singleData","props","match","params","id","fetchFilm","singleFilm","release_date","director","producer","opening_crawl","App","HashRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ce27814.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Index extends Component {\r\n  state = {\r\n    films : ''\r\n  }\r\n  componentDidMount(){\r\n    let fetchFilms = async () => {\r\n      let getFilms = await fetch('https://swapi.co/api/films?format=json')\r\n      let dataFilms = await getFilms.json()\r\n    \r\n      this.setState({\r\n        films: dataFilms\r\n      })\r\n    }\r\n\r\n    fetchFilms()\r\n  }\r\n\r\n  render() {\r\n    //console.log(this.state.films.results)\r\n    let filmList = this.state.films.results ? (\r\n      this.state.films.results.map(data => {\r\n        let paramsId = data.url.slice(27);\r\n        return (\r\n          <Link className=\"index__link\" to={`/film/`+ paramsId} key={data.episode_id}>\r\n          {data.title}\r\n          <p>click for more</p>\r\n          </Link>\r\n        )\r\n      })\r\n    ) : (\r\n      <p>loading...</p>\r\n    ) \r\n    \r\n    return (\r\n        <div className=\"index\">\r\n          {filmList}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;","import React, { Component } from 'react';\r\n\r\nclass Film extends Component {\r\n  state = {\r\n    filmInfo: ''\r\n  }\r\n\r\n  componentDidMount(){\r\n    let fetchFilm = async()=>{\r\n      let fetchSingleFilm = await fetch('https://swapi.co/api/films/' + this.props.match.params.id + '?format=json');\r\n      let singleData = await fetchSingleFilm.json();\r\n\r\n      this.setState({\r\n        filmInfo : singleData\r\n      })\r\n    }\r\n    fetchFilm()\r\n  }\r\n\r\n  render() {\r\n    //console.log(this.state.filmInfo)\r\n    let singleFilm = this.state.filmInfo ? (\r\n      <div className=\"film__content\">\r\n        <p>Title: <span>{this.state.filmInfo.title}</span></p>\r\n        <p>Release Date: <span>{this.state.filmInfo.release_date}</span></p>\r\n        <p>Director: <span>{this.state.filmInfo.director}</span></p>\r\n        <p>Producer: <span>{this.state.filmInfo.producer}</span></p>\r\n        <p>Synopsis: <span>{this.state.filmInfo.opening_crawl}</span></p>\r\n       \r\n      </div>\r\n        \r\n    ):(\r\n      <p>loading...</p>\r\n    )\r\n    return (\r\n      <div className=\"film\">\r\n        {singleFilm}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Film;","import React, { Component } from 'react'\r\nimport { HashRouter, Route} from 'react-router-dom'\r\nimport Index from './components/Index'\r\nimport Film from './components/Film'\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <div className=\"root\">\r\n          <div className=\"title\">\r\n            <h1>Star Wars Movies</h1>\r\n          </div>\r\n          <Route exact path=\"/\" component={Index}></Route>\r\n          <Route path=\"/film/:id\" component={Film}></Route>\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}